***The significance of these data depends on many factors, so in different situations it may be different.***

Processes = 5 | Threads = 20:

    When number of shapes is 100000
    General Execution Finished in:  0.3 second(s)
    Threads Execution Finished in:  0.19 second(s)
    Pool Execution Finished in:  0.42 second(s)
    Hybrid Execution Finished in: 1.44 second(s)

    When number of shapes is 200000
    General Execution Finished in:  0.57 second(s)
    Threads Execution Finished in:  0.36 second(s)
    Pool Execution Finished in:  0.59 second(s)
    Hybrid Execution Finished in: 2.51 second(s)

    When number of shapes is 500000
    General Execution Finished in:  1.41 second(s)
    Threads Execution Finished in:  0.91 second(s)
    Pool Execution Finished in:  1.34 second(s)
    Hybrid Execution Finished in: 6.14 second(s)

    When number of shapes is 1000000
    General Execution Finished in:  2.85 second(s)
    Threads Execution Finished in:  1.83 second(s)
    Pool Execution Finished in:  2.83 second(s)
    Hybrid Execution Finished in: 12.94 second(s)

Processes = 10 | Threads = 20:

    When number of shapes is 100000
    General Execution Finished in:  0.29 second(s)
    Threads Execution Finished in:  0.18 second(s)
    Pool Execution Finished in:  0.37 second(s)
    Hybrid Execution Finished in: 1.1 second(s)

    When number of shapes is 200000
    General Execution Finished in:  0.57 second(s)
    Threads Execution Finished in:  0.36 second(s)
    Pool Execution Finished in:  0.59 second(s)
    Hybrid Execution Finished in: 1.95 second(s)

    When number of shapes is 500000
    General Execution Finished in:  1.42 second(s)
    Threads Execution Finished in:  0.9 second(s)
    Pool Execution Finished in:  1.33 second(s)
    Hybrid Execution Finished in: 4.76 second(s)

    When number of shapes is 1000000
    General Execution Finished in:  2.85 second(s)
    Threads Execution Finished in:  1.83 second(s)
    Pool Execution Finished in:  2.75 second(s)
    Hybrid Execution Finished in: 9.86 second(s)

Processes = 5 | Threads = 100:

    When number of shapes is 100000
    General Execution Finished in:  0.29 second(s)
    Threads Execution Finished in:  0.18 second(s)
    Pool Execution Finished in:  0.37 second(s)
    Hybrid Execution Finished in: 5.69 second(s)

    When number of shapes is 200000
    General Execution Finished in:  0.56 second(s)
    Threads Execution Finished in:  0.36 second(s)
    Pool Execution Finished in:  0.58 second(s)
    Hybrid Execution Finished in: 11.38 second(s)

    When number of shapes is 500000
    General Execution Finished in:  1.42 second(s)
    Threads Execution Finished in:  0.91 second(s)
    Pool Execution Finished in:  1.36 second(s)
    Hybrid Execution Finished in: 29.98 second(s)

    When number of shapes is 1000000
    General Execution Finished in:  2.85 second(s)
    Threads Execution Finished in:  1.83 second(s)
    Pool Execution Finished in:  2.72 second(s)
    Hybrid Execution Finished in: 64.31 second(s)



----------------------------------------------TO SUM UP OUR RESULTS:---------------------------------------------------
To determine the most optimal decision, we need to consider the trade-offs between execution time and
resources utilized. Here are some observations:

-General Execution: This seems to be a baseline execution without any parallelization. It's consistent across different
configurations but tends to take longer as the number of shapes increases.

-Threads Execution: This method shows improvement over the general execution, especially as the number
of shapes increases. However, the improvement diminishes at higher numbers of shapes.

-Pool Execution: Similar to threads, this method improves execution time compared to the general execution.
It shows consistent improvement across different configurations.

-Hybrid Execution: This method involves a combination of processes and threads. While it provides significant
improvement over the general execution, it tends to have the longest execution times among the parallelization methods,
especially as the number of shapes increases.

Based on these observations, if we prioritize minimizing execution time, the optimal decision seems to be using a
high number of threads. This is particularly evident in the case of 5 processes and 100 threads. However, if there
are resource constraints or diminishing returns in performance improvement, a combination of processes and threads
(hybrid execution) might be a better choice, balancing execution time with resource utilization.

In summary, the most optimal decision depends on the specific constraints and priorities of the situation, balancing
between execution time and resource utilization.

P.S. Considering these details:

*If minimizing execution time is the primary concern, utilizing a higher number of threads seems to be the most
optimal decision. This is particularly evident in configurations with 5 processes and 100 threads.

*If resource utilization and scalability are also important factors, then a combination of processes and threads
(hybrid execution) might be a better choice, balancing execution time with resource consumption.

**The choice also depends on the specific workload, hardware constraints, and priorities of the system/application
being developed. For example, if the system has limited memory or if there are other tasks competing for resources,
a more balanced approach might be necessary.

--> Gvantsa
