***The significance of these data depends on many factors, so in different situations it may be different.***

Processes = 5 | Threads = 20:

    When number of shapes is 100000
    General Execution Finished in:  0.48 second(s)
    Threads Execution Finished in:  0.31 second(s)
    Pool Execution Finished in:  0.62 second(s)
    Hybrid Execution Finished in: 25.47 second(s)

    When number of shapes is 200000
    General Execution Finished in:  0.99 second(s)
    Threads Execution Finished in:  0.62 second(s)
    Pool Execution Finished in:  1.01 second(s)
    Hybrid Execution Finished in: 49.39 second(s)

    When number of shapes is 500000
    General Execution Finished in:  2.47 second(s)
    Threads Execution Finished in:  1.56 second(s)
    Pool Execution Finished in:  2.09 second(s)
    Hybrid Execution Finished in: 122.25 second(s)

    When number of shapes is 1000000
    General Execution Finished in:  4.73 second(s)
    Threads Execution Finished in:  2.44 second(s)
    Pool Execution Finished in:  3.57 second(s)
    Hybrid Execution Finished in: 234.87 second(s)

Processes = 10 | Threads = 20:

    When number of shapes is 100000
    General Execution Finished in:  0.49 second(s)
    Threads Execution Finished in:  0.32 second(s)
    Pool Execution Finished in:  0.7 second(s)
    Hybrid Execution Finished in: 25.15 second(s)

    When number of shapes is 200000
    General Execution Finished in:  0.99 second(s)
    Threads Execution Finished in:  0.63 second(s)
    Pool Execution Finished in:  0.98 second(s)
    Hybrid Execution Finished in: 47.47 second(s)

    When number of shapes is 500000
    General Execution Finished in:  2.26 second(s)
    Threads Execution Finished in:  1.57 second(s)
    Pool Execution Finished in:  2.14 second(s)
    Hybrid Execution Finished in: 117.18 second(s)

    When number of shapes is 1000000
    General Execution Finished in:  4.63 second(s)
    Threads Execution Finished in:  2.33 second(s)
    Pool Execution Finished in:  3.31 second(s)
    Hybrid Execution Finished in: 234.96 second(s)

Processes = 5 | Threads = 100:

    When number of shapes is 100000
    General Execution Finished in:  0.51 second(s)
    Threads Execution Finished in:  0.43 second(s)
    Pool Execution Finished in:  0.68 second(s)
    Hybrid Execution Finished in: 118.43 second(s)

    When number of shapes is 200000
    General Execution Finished in:  0.99 second(s)
    Threads Execution Finished in:  0.63 second(s)
    Pool Execution Finished in:  1.01 second(s)
    Hybrid Execution Finished in: 241.72 second(s)

    When number of shapes is 500000
    General Execution Finished in:  2.45 second(s)
    Threads Execution Finished in:  1.57 second(s)
    Pool Execution Finished in:  2.28 second(s)
    Hybrid Execution Finished in: 587.35 second(s)

    When number of shapes is 1000000
    General Execution Finished in:  4.48 second(s)
    Threads Execution Finished in:  2.32 second(s)
    Pool Execution Finished in:  3.38 second(s)
    Hybrid Execution Finished in: 1201.72 second(s)


----------------------------------------------TO SUM UP OUR RESULTS:---------------------------------------------------

From the provided data, it seems that the optimal decision varies based on the number of processes and threads.
For the configuration with 5 processes and 20 threads:

For a small number of shapes (100,000 to 200,000), the "Threads" approach is the most optimal.
For larger numbers of shapes (500,000 to 1,000,000), the "Pool" approach seems to be the most optimal.

For the configuration with 10 processes and 20 threads:
Similar to the 5 processes case, for a small number of shapes (100,000 to 200,000), the "Threads" approach is the most
optimal.

For larger numbers of shapes (500,000 to 1,000,000), the "Pool" approach is also the most optimal.

For the configuration with 5 processes and 100 threads:
For a small number of shapes (100,000 to 200,000), the "Threads" approach is still the most optimal.

However, for larger numbers of shapes (500,000 to 1,000,000), none of the approaches seem to be efficient,
with the "Hybrid" approach being the least optimal due to significantly longer execution times.
Overall, the decision on the most optimal approach depends on the specific scenario and the number of processes
and threads available. For smaller datasets, the "Threads" approach generally performs better, while for larger
datasets, the "Pool" approach tends to be more efficient. However, it's essential to consider the trade-offs between
execution time and resource utilization.

--> Gvantsa
